<% @TinyPG Namespace="TinyEE" %>

PLUS        -> @"\+";
MINUS       -> @"-";
STAR        -> @"\*";
FSLASH      -> @"\/";
EXPONENT    -> @"\^";
MODULO      -> @"\%";
LPAREN      -> @"\(";
RPAREN      -> @"\)";
LBRACKET    -> @"\[";
RBRACKET    -> @"\]";
LBRACE      -> @"\{";
RBRACE      -> @"\}";
EQUAL       -> @"=";
LT          -> @"<";
GT          -> @">";
LTE         -> @"<=";
GTE         -> @">=";
NOTEQUAL    -> @"<>";
AND         -> @"[Aa][Nn][Dd]";
OR          -> @"[Oo][Rr]";
NOT         -> @"[Nn][Oo][Tt]";
DOT         -> @"\.";
DOTDOT      -> @"\.\.";
QUIZ        -> @"\?";
QUIZCOLON   -> @"\?:";
COMMA       -> @",";
COLON       -> @":";
EOF         -> @"^$";
TRUE        -> @"[Tt][Rr][Uu][Ee]";
FALSE       -> @"[Ff][Aa][Ll][Ss][Ee]";
NULL        -> @"[Nn][Uu][Ll][Ll]";
INTEGER     -> @"(\+|-)?[0-9]+";
DECIMAL     -> @"(\+|-)?[0-9]*\.[0-9]+";
INTRANGE    -> @"[0-9]+\.\.[0-9]+";
STRING      -> @"""([^""\\]*(\\""[^""\\]*)*)""";
FUNCTION    -> @"[a-zA-Z][a-zA-Z0-9_]*\(";
IDENTIFIER  -> @"[a-zA-Z_$][a-zA-Z0-9_$]*";
[Skip] WS   -> @"\s+";

Start                 -> Expression ? EOF;
Expression            -> ConditionalExpression;
ConditionalExpression -> CoalesceExpression (QUIZ ConditionalExpression COLON ConditionalExpression)?;
CoalesceExpression    -> OrExpression (QUIZCOLON OrExpression)*;
OrExpression          -> AndExpression (OR AndExpression)*;
AndExpression         -> NotExpression (AND NotExpression)*;
NotExpression         -> NOT? Compare;
Compare               -> Addition ((EQUAL | GT | LT | GTE | LTE | NOTEQUAL) Addition)*;
Addition              -> Multiplication ((PLUS | MINUS) Multiplication)*;
Multiplication        -> Power ((STAR | FSLASH | MODULO) Power)*;
Power                 -> Negation (EXPONENT Negation)*;
Negation              -> MINUS? Member;
Member                -> Base (DOT MemberAccess | LBRACKET IndexAccess)*;
MemberAccess          -> IDENTIFIER | FunctionCall;
IndexAccess           -> (Expression) RBRACKET;
Base                  -> Literal | Variable | Group | FunctionCall;
Variable              -> IDENTIFIER;
Group                 -> LPAREN Expression RPAREN;
FunctionCall          -> FUNCTION ArgumentList? RPAREN;
ArgumentList          -> Expression (COMMA Expression)*;
Literal               -> STRING | DECIMAL | INTEGER | TRUE | FALSE | NULL | INTRANGE | ListLiteral | HashLiteral;
ListLiteral           -> LBRACKET ArgumentList? RBRACKET;
HashLiteral           -> LBRACE PairList? RBRACE;
PairList              -> Pair (COMMA Pair)*;
Pair                  -> IDENTIFIER COLON Expression;